# -*- coding: utf-8 -*-
"""Online_Retail_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xczq3alq5Dexq-wddi0ZMhai6NGHfj3N
"""

!pip install openpyxl

import pandas as pd
import matplotlib.pyplot as plt

!wget https://archive.ics.uci.edu/static/public/352/online+retail.zip

!unzip online+retail.zip

df1 = pd.read_excel('Online Retail.xlsx',dtype={'InvoiceNo':'string','StockCode':'string','Description':'string','Country':'string'})
df1.head()

df1.shape

df1.info()

"""##Data Cleaning"""

df1.isnull().sum()

df1[df1.Description.isnull()]

df1[df1.StockCode=="22139"].Description

most_freq = df1[['StockCode','Description']].value_counts().reset_index()
most_freq

most_freq[most_freq.StockCode=="85123A"].head()

most_freq = most_freq.groupby("StockCode").head(1)
most_freq

most_freq.columns = ["StockCode","freq_Description","count"]
df2 = df1.merge(most_freq,on="StockCode",how="left")
df2.head()

df2['Description'] = df2['freq_Description']
df2.head()

df2.isnull().sum()

df2.dropna(subset=['Description'],inplace=True)
df2.isnull().sum()

df2.drop(columns=["freq_Description",'count'],inplace=True)
df2.head()

df2.describe()

df2[df2.Quantity<0]

df3 = df2[(df2.UnitPrice>0) & (df2.Quantity>0)]
df3.describe()

"""##Feature Engineering"""

df4 = df3.copy()
df4['TotalSales'] = df4.Quantity * df4.UnitPrice
df4.head()

df4['Month'] = df4["InvoiceDate"].dt.month
df4.sample(5)

"""##Visualization and EDA

####1. Plot Monthly Sales
"""

monthly_sales = df4.groupby("Month")['TotalSales'].sum()
monthly_sales.plot(kind="line",title="Monthly Sales",marker="o")
plt.xlabel("Month")
plt.ylabel("Total Sales")
plt.grid()
plt.show()

"""#### 2. Top 5 Countries"""

country_sales = df4.groupby("Country")['TotalSales'].sum().sort_values(ascending=False)
top_5_countries = country_sales.head(5)

plt.figure(figsize=(10, 6))
top_5_countries.plot(kind="barh", color="skyblue")
plt.title("Top 5 Countries by Total Sales")
plt.xlabel("Total Sales")
plt.ylabel("Country")
plt.grid()
plt.gca().invert_yaxis()
plt.show()

product_sales = df4.groupby("StockCode")['TotalSales'].sum().sort_values(ascending=False)
top_10_products = product_sales.head(5)

plt.figure(figsize=(8,6))
top_10_products.plot(kind="barh", color="lightcoral")
plt.title("Top 10 Products by Total Sales")
plt.xlabel("Total Sales")
plt.ylabel("Stock Code")
plt.gca().invert_yaxis()
plt.show()

df4[df4.StockCode=='DOT']

for stock_code in top_10_products.index:
  description = df4[df4.StockCode==stock_code].Description.iloc[0]
  print(f"Stock Code: {stock_code} ==> Description: {description}")

"""#### 3. RFM Analysis"""



current_date = df4['InvoiceDate'].max() +pd.Timedelta(days=1)
current_date

rfm = df4.groupby("CustomerID").agg({
    "InvoiceDate":lambda x:(current_date - x.max()).days,
    "InvoiceNo":"count",
    "TotalSales":"sum"
})

rfm.columns = ['Recency','Frequency','Monetary']
rfm.head()

rfm['R_Segment'] = pd.qcut(rfm['Recency'],4,labels=[4,3,2,1])
rfm['F_Segment'] = pd.qcut(rfm['Frequency'],4,labels=[1,2,3,4])
rfm['M_Segment'] = pd.qcut(rfm['Monetary'],4,labels=[1,2,3,4])
rfm['RFM_Score'] = rfm[['R_Segment','F_Segment','M_Segment']].sum(axis=1)
rfm.head()

rfm.sort_values('RFM_Score',ascending=False).head()

"""#### 4. Customer Churn Analysis

"""

df4.head(2)

current_date

current_date = df4['InvoiceDate'].max()

df4['InvoiceDate'] = pd.to_datetime(df4['InvoiceDate'])

customer_last_purchase = df4.groupby("CustomerID")['InvoiceDate'].max()
customer_last_purchase.head()

customer_last_purchase = (current_date - customer_last_purchase).dt.days
customer_last_purchase.head(3)

churn_threshold = 90
churn_customers = customer_last_purchase[customer_last_purchase > churn_threshold]
churn_customers.head(5)

print("Number of Churned Customers: ",len(churn_customers))
plt.figure(figsize=(10,6))
plt.hist(customer_last_purchase, bins=50, color='red', edgecolor='black')
plt.axvline(x=churn_threshold, color='blue', linestyle='dashed', linewidth=2)
plt.xlabel('Days Since Last Purchase')
plt.ylabel('Number of Customers')
plt.show()

