# -*- coding: utf-8 -*-
"""GooglePlayStore_dataset_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1faVq_EmB0spmhjQpvPQ29mwGshI9ggA7
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('Play Store Data.csv')
df

df.shape

df.info()

df.describe()

df.isnull().sum()

"""# Data Cleaning

**Observations**

The Dataset has missing values
"""

df.head(2)

df['Reviews'].unique()

df['Reviews'].str.isnumeric().sum()

df[~df['Reviews'].str.isnumeric()]

df_copy = df.copy()

df_copy = df_copy.drop(df_copy.index[10472])

df_copy[~df_copy['Reviews'].str.isnumeric()]

#Convert Review Datatype to int

df_copy['Reviews'] = df_copy['Reviews'].astype('int')

df_copy.info()

df_copy['Size'].unique()

df_copy[df_copy['Size'] == 'Varies with device']

df_copy['Size'] = df_copy['Size'].str.replace('M','000')
df_copy['Size'] = df_copy['Size'].str.replace('k','')
df_copy['Size'] = df_copy['Size'].str.replace('Varies with device','Nan')
df_copy['Size'] = df_copy['Size'].astype('float')

df_copy['Size']

df_copy['Installs'].unique()

df_copy['Price'].unique()

chars_to_reomve = ['+',',','$']
cols_to_clean = ['Installs','Price']

for item in chars_to_reomve:
    for col in cols_to_clean:
        df_copy[col] = df_copy[col].str.replace(item,'')

df_copy['Installs'].unique()

df_copy['Price'].unique()

df_copy['Installs']=df_copy['Installs'].astype('int')
df_copy['Price']=df_copy['Price'].astype('float')

df_copy.info()

df_copy['Last Updated'].unique()

df_copy['Last Updated'] = pd.to_datetime(df_copy['Last Updated'])
df_copy['Day'] = df_copy['Last Updated'].dt.day
df_copy['Month'] = df_copy['Last Updated'].dt.month
df_copy['Year'] = df_copy['Last Updated'].dt.year
df_copy.head(2)

df_copy.drop('Last Updated',axis=1,inplace=True)

df_copy.info()

df_copy.head()

from google.colab import drive
drive.mount('/content/drive')

"""Exploratory Data Analysis (EDA)"""

df_copy[df_copy.duplicated('App')].shape

"""**Observation**

The Dataset has duplicate revords
"""

df_copy = df_copy.drop_duplicates(subset=['App'],keep='first')

df_copy.shape

df_copy.info()

"""**Explore Data**"""

numerical_features = [feature for feature in df_copy.columns if df_copy[feature].dtype in ['int64', 'float64', 'int32']]
categorical_features = [feature for feature in df_copy.columns if df_copy[feature].dtype=='O']

print("Numerical Features: ",numerical_features)
print("Categorical Features: ",categorical_features)

for col in categorical_features:
  print(df[col].value_counts(normalize=True)*100)
  print("-------------------------------")

plt.figure(figsize=(10,10))
plt.suptitle("Univariate Analysis of features", fontsize=20, fontweight='bold',alpha=0.8,y=1.)

for i in range(0, len(numerical_features)):
  plt.subplot(5,3,i+1)
  sns.kdeplot(x=df_copy[numerical_features[i]],shade=True,color='r')
  plt.xlabel(numerical_features[i])
  plt.tight_layout()

"""**Observation**

rating and yeat is left skewed

Reviews, size, installs and price are right skewed
"""

plt.figure(figsize=(10,10))
plt.suptitle("Bivariate Analysis of Categorical features", fontsize=20, fontweight='bold',alpha=0.8,y=1.)
category = ['Type','Content Rating']
for i in range(0, len(category)):
  plt.subplot(2,2,i+1)
  sns.countplot(x=df_copy[category[i]],palette='Set2')
  plt.xlabel(category[i])
  plt.xticks(rotation=45)
  plt.tight_layout()

from enum import auto
#Most popular app category

df_copy['Category'].value_counts().plot.pie(y=df['Category'],figsize=(15,16))

"""**Observation**

1. There are more kinds of apps in playstore which are under category of family, games and tools
2. Beauty, Comics, Arts and Weather Apps are very less in playstore
"""

#Top 10 App Categories

category = pd.DataFrame(df_copy['Category'].value_counts())
category.rename(columns={'Category':'Count'},inplace=True)
category.head(10)

plt.figure(figsize=(15,6))
sns.barplot(x=category.index[:10],y='count',data= category[:10],palette='viridis')
plt.title('Top 10 App Categories')
plt.xticks(rotation=90)
plt.show()

"""**Observation**

Family category has the most of the apps

"""

#Top 5 most installed apps in each popular categories

df_copy.groupby('Category')['Installs'].sum().sort_values(ascending=False)[:5]

# How many apps are there on Google Play Store which get 5 start rating
five_star_apps = df_copy[df_copy['Rating'] == 5.0]
num_five_star_apps = len(five_star_apps)

print(f"Number of apps with a 5-star rating: {num_five_star_apps}")

# Display the names of the 5-star apps
print("Apps with a 5-star rating:")
for app_name in five_star_apps['App']:
    print(app_name)